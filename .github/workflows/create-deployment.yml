name: Manual Jira Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '배포할 브랜치 이름'
        required: true
        default: 'main'

          
      environment:
        description: '배포 환경 '
        required: true
        default: 'stage'
        type: choice
        options:
          - prod
          - stage
          - dev

jobs:
  deploy-to-jira:
    runs-on: ubuntu-latest

    permissions:
      deployments: write
    
    steps:
      # 1. 지정된 브랜치 체크아웃
      - name: Checkout specified branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      # 2. Jira 이슈 키 추출 (선택 사항)
      - name: Extract Jira Issue Keys
        id: extract-keys
        run: |
          ISSUE_KEYS=$(git log -1 --pretty=%B | grep -oE '[A-Z]+-[0-9]+' || echo "No issue key found")
          echo "issue-keys=$ISSUE_KEYS" >> $GITHUB_OUTPUT

      # 3. 배포 생성
      - name: Create Deployment
        id: create-deployment
        uses: chrnorm/deployment-action@releases/v2
        with:
          token: ${{ github.token }}
          environment: ${{ github.event.inputs.environment }}
          ref: ${{ github.event.inputs.branch }}
          description: "Manual deployment from ${{ github.event.inputs.branch }} to ${{ github.event.inputs.environment }}"

      # 4. 임시 배포 작업 (모의 배포)
      - name: Simulate Deployment
        run: |
          echo "Simulating deployment to ${{ github.event.inputs.environment }}..."
          mkdir -p deploy-output
          echo "Deployed from branch: ${{ github.event.inputs.branch }}" > deploy-output/info.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> deploy-output/info.txt
          echo "Jira Issue Keys: ${{ steps.extract-keys.outputs.issue-keys }}" >> deploy-output/info.txt
          sleep 5  # 실제 배포 시간 흉내
          echo "Deployment simulation completed!"
      

      # 5. 배포 상태 업데이트
      - name: Update Deployment Status
        uses: chrnorm/deployment-status@releases/v2
        if: success()
        with:
          token: ${{ github.token }}
          state: "success"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
          
      - name: Update Deployment Status on Failure
        if: failure()
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "failure"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
