name: Update Jira Fix Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Î¶¥Î¶¨Ïä§ Î≤ÑÏ†Ñ (ex. 1.2.0)'
        required: true
      repo:
        description: 'ÎåÄÏÉÅ Î†àÌè¨ (ex. org/repo)'
        required: true
      use_pat:
        description: 'Ïô∏Î∂Ä Î†àÌè¨ Ï†ëÍ∑ºÏóê PAT ÏÇ¨Ïö©Ìï†ÏßÄ Ïó¨Î∂Ä (true/false)'
        required: true
        default: 'false'
      fix_prefix:
        description: 'FixVersion Ï†ëÎëêÏñ¥ -> prefix + space + version '
        required: true
        default: ''
      from_tag:
        description: 'ÎπÑÍµêÌï† ÏãúÏûë ÌÉúÍ∑∏ (Ïòà: 1.1.0 ÎòêÎäî v1.1.0-dev) default : false (-devÎ•º Ï∞æÏùå)'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: jira
    steps:
      - name: Checkout target repository
        id: checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.repo }}
          path: target-repo
          fetch-depth: 0
          fetch-tags: true
          token: ${{ github.event.inputs.use_pat == 'true' && secrets.REPO_PAT || github.token }}

      - name: Notify checkout
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          REPO: ${{ github.event.inputs.repo }}
        run: |
          MSG="üì¶ Î†àÌè¨ÏßÄÌÜ†Î¶¨ Ï≤¥ÌÅ¨ÏïÑÏõÉ ÏôÑÎ£å: $REPO"
          echo "$MSG"
          echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":package:"}' > payload.json
          curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"


      - name: Extract Jira tickets from commits  # ‚úÖ [ÏàòÏ†ïÎê®]
        id: extract
        run: |
          VERSION="${{ github.event.inputs.version }}"
          FROM_TAG="${{ github.event.inputs.from_tag }}"
          if [[ -z "$FROM_TAG" ]]; then
            FROM_TAG="v${VERSION}-dev"
          fi
          TO_TAG="${VERSION}"
          echo "üîç Ïª§Î∞ã Î≤îÏúÑ: $FROM_TAG .. $TO_TAG"

          git -C target-repo rev-parse "$FROM_TAG" >/dev/null 2>&1 || {
            echo "slack-message=‚ùå ÌÉúÍ∑∏ $FROM_TAG Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§." >> $GITHUB_OUTPUT
            exit 1
          }

          git -C target-repo rev-parse "$TO_TAG" >/dev/null 2>&1 || {
            echo "slack-message=‚ùå ÌÉúÍ∑∏ $TO_TAG Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§." >> $GITHUB_OUTPUT
            exit 1
          }

          COMMITS=$(git -C target-repo log --pretty=format:"%h|%an|%s" ${FROM_TAG}..${TO_TAG})
          if [[ -z "$COMMITS" ]]; then
            echo "slack-message=‚ö†Ô∏è $FROM_TAG ~ $TO_TAG ÏÇ¨Ïù¥Ïóê Ïª§Î∞ãÏù¥ ÏóÜÏäµÎãàÎã§." >> $GITHUB_OUTPUT
            echo "tickets=" >> $GITHUB_OUTPUT
            exit 0
          fi

          TICKET_PATTERN='[A-Z][A-Z0-9]+-[0-9]+'
          TICKETS=$(echo "$COMMITS" | grep -o -E "$TICKET_PATTERN" | sort -u | tr '\n' ' ')
          COMMITS_BASE64=$(echo "$COMMITS" | base64 -w 0)

          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT
          echo "commits_base64=$COMMITS_BASE64" >> $GITHUB_OUTPUT
          echo "slack-message=üîç Jira Ìã∞Ïºì Î∞è Ïª§Î∞ã Ï∂îÏ∂ú ÏôÑÎ£å: $TICKETS" >> $GITHUB_OUTPUT

      - name: Notify ticket extraction
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          MSG: ${{ steps.extract.outputs.slack-message }}
        run: |
          echo "$MSG"
          echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":mag:"}' > payload.json
          curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"


      - name: Create FixVersion if not exists
        id: ensure-fixversion
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          USER: ${{ secrets.USER }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          PREFIX="${{ github.event.inputs.fix_prefix }}"
          FIX_NAME="${PREFIX} ${VERSION}"
          TICKETS="${{ steps.extract.outputs.tickets }}"
          PROJECT_KEY=$(echo "$TICKETS" | awk '{print $1}' | cut -d'-' -f1)

          echo "üîé ÌîÑÎ°úÏ†ùÌä∏ ÌÇ§: $PROJECT_KEY"
          echo "üéØ FixVersion: $FIX_NAME"

          # FixVersion Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
          RESPONSE=$(curl -s -w "%{http_code}" -o response.json -u "$USER:$API_TOKEN" \
            -H "Accept: application/json" \
            "$DOMAIN/rest/api/3/project/$PROJECT_KEY/versions")

          if [[ "$RESPONSE" != "200" ]]; then
            echo "‚ùå FixVersion Ï°∞Ìöå Ïã§Ìå® (ÏΩîÎìú: $RESPONSE)"
            cat response.json
            MSG="‚ùå *FixVersion Ï°∞Ìöå Ïã§Ìå®*\nÏÉÅÌÉú ÏΩîÎìú: $RESPONSE\nÏùëÎãµ:\n$(cat response.json)"
            echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":x:"}' > payload.json
            curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"
            exit 1
          fi

          EXISTING=$(jq -r '.[].name' < response.json | grep -Fx "$FIX_NAME")

          if [[ -z "$EXISTING" ]]; then
            echo "üîß FixVersion $FIX_NAME ÏóÜÏùå ‚Üí ÏÉùÏÑ±"

            RESPONSE=$(curl -s -w "%{http_code}" -o response.json -u "$USER:$API_TOKEN" \
              -H "Content-Type: application/json" \
              -X POST \
              --data "{
                \"name\": \"$FIX_NAME\",
                \"project\": \"$PROJECT_KEY\",
                \"description\": \"ÏûêÎèô ÏÉùÏÑ±Îêú FixVersion\",
                \"released\": false
              }" "$DOMAIN/rest/api/3/version")

            if [[ "$RESPONSE" != "201" ]]; then
              echo "‚ùå FixVersion ÏÉùÏÑ± Ïã§Ìå® (ÏΩîÎìú: $RESPONSE)"
              cat response.json
              MSG="‚ùå *FixVersion ÏÉùÏÑ± Ïã§Ìå®*\nÏÉÅÌÉú ÏΩîÎìú: $RESPONSE\nÏùëÎãµ:\n$(cat response.json)"
              echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":x:"}' > payload.json
              curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"
              exit 1
            fi
            echo "‚úÖ FixVersion $FIX_NAME ÏÉùÏÑ± ÏôÑÎ£å"
          else
            echo "‚úÖ FixVersion $FIX_NAME Ïù¥ÎØ∏ Ï°¥Ïû¨"
          fi


      - name: Update Jira Fix Versions
        id: update-jira
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          USER: ${{ secrets.USER }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          IFS=' ' read -ra TICKETS <<< "${{ steps.extract.outputs.tickets }}"
          if [[ -z "${TICKETS[*]}" ]]; then
            echo "slack-message=‚ÑπÔ∏è Jira Ìã∞Ïºì ÏóÜÏùå. ÏóÖÎç∞Ïù¥Ìä∏ ÏÉùÎûµ." >> $GITHUB_OUTPUT
            exit 0
          fi

          FAILED_TICKETS=()
          for TICKET in "${TICKETS[@]}"; do
            echo "‚û°Ô∏è $TICKET FixVersion ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json -u "$USER:$API_TOKEN" \
              -X PUT -H "Content-Type: application/json" \
              --data "{\"update\":{\"fixVersions\":[{\"add\":{\"name\":\"$VERSION\"}}]}}" \
              "$DOMAIN/rest/api/2/issue/$TICKET")

            if [[ "$RESPONSE" == "204" ]]; then
              echo "‚úÖ $TICKET ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ"
            elif [[ "$RESPONSE" == "401" || "$RESPONSE" == "403" ]]; then
              echo "‚ùå Jira Ïù∏Ï¶ù Ïã§Ìå® ($RESPONSE)"
              cat response.json
              MSG="‚ùå *Jira Ïù∏Ï¶ù Ïã§Ìå®*\nÌã∞Ïºì: $TICKET\nÏÉÅÌÉú ÏΩîÎìú: $RESPONSE\nÏùëÎãµ:\n$(cat response.json)"
              echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":x:"}' > payload.json
              curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"
              exit 1
            else
              echo "‚ùå $TICKET ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå® (ÏΩîÎìú: $RESPONSE)"
              cat response.json
              MSG="‚ö†Ô∏è *FixVersion ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®*\nÌã∞Ïºì: $TICKET\nÏÉÅÌÉú ÏΩîÎìú: $RESPONSE\nÏùëÎãµ:\n$(cat response.json)"
              echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":warning:"}' > payload.json
              curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"
              FAILED_TICKETS+=("$TICKET")
            fi
            sleep 1
          done

          if [[ ${#FAILED_TICKETS[@]} -ne 0 ]]; then
            echo "slack-message=‚ö†Ô∏è ÏùºÎ∂Ä Jira Ìã∞Ïºì ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: ${FAILED_TICKETS[*]}" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "slack-message=üéâ Jira Fix Version ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ" >> $GITHUB_OUTPUT


      - name: Notify Jira update
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          MSG: ${{ steps.update-jira.outputs.slack-message }}
        run: |
          echo "$MSG"
          echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":rocket:"}' > payload.json
          curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"


      - name: Send summary Slack message
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          VERSION: ${{ github.event.inputs.version }}
          TICKETS: ${{ steps.extract.outputs.tickets }}
          COMMITS_BASE64: ${{ steps.extract.outputs.commits_base64 }}
          DOMAIN: ${{ secrets.DOMAIN }}
        run: |
          if [[ -z "$TICKETS" ]]; then
            MSG="‚ÑπÔ∏è No Jira tickets found for version $VERSION. No updates made."
          else
            COMMITS=$(echo "$COMMITS_BASE64" | base64 -d)

            FIXVERSION_LINK="$DOMAIN/issues/?jql=fixVersion=${VERSION}"
            MSG="üì¶ *Release $VERSION FixVersion ÏµúÏ¢Ö ÏöîÏïΩ*\n\n"
            MSG+="üîó <${FIXVERSION_LINK}|FixVersion: $VERSION>\n\n"

            MSG+="üé´ *Ìã∞Ïºì Î™©Î°ù:*\n"
            for TICKET in $TICKETS; do
              MSG+="‚Ä¢ <${DOMAIN}/browse/${TICKET}|${TICKET}>\n"
            done

            MSG+="\nüîÄ *Ìè¨Ìï®Îêú Ïª§Î∞ã (ÏûëÏÑ±Ïûê Ìè¨Ìï®):*\n"
            while IFS='|' read -r HASH AUTHOR MESSAGE; do
              MSG+="‚Ä¢ $HASH ($AUTHOR): $MESSAGE\n"
            done <<< "$COMMITS"
          fi

          echo "$MSG"
          echo "$MSG" | jq -Rs '{username: "jira-bot", text: ., icon_emoji: ":memo:"}' > payload.json
          curl -X POST -H "Content-Type: application/json" --data @payload.json "$SLACK_WEBHOOK"
