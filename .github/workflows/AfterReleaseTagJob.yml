name: Update Jira Fix Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: '릴리스 버전 (예: 1.2.0)'
        required: true
      repo:
        description: '추적할 레포지토리 (예: owner/repo)'
        required: true

jobs:
  update-fix-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        run: |
          git clone --depth=1 "https://github.com/${{ github.event.inputs.repo }}.git" target-repo
          cd target-repo && git fetch --tags

      - name: Notify - Checkout 완료
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST --data-urlencode "payload={
            \"username\": \"jira-bot\",
            \"text\": \"📦 저장소 \`${{ github.event.inputs.repo }}\` 체크아웃 완료\",
            \"icon_emoji\": \":package:\"
          }" "$SLACK_WEBHOOK"

      - name: Extract commits and Jira tickets
        id: extract
        run: |
          VERSION="${{ github.event.inputs.version }}"
          DEV_VERSION="v${VERSION}-dev"
          VERSION_TAG="v${VERSION}"
          TICKET_PATTERN='[A-Z][A-Z0-9]+-[0-9]+'

          git -C target-repo rev-parse "$DEV_VERSION" >/dev/null 2>&1 || {
            echo "SLACK_MESSAGE=❌ 태그 $DEV_VERSION 이 존재하지 않습니다." >> $GITHUB_ENV
            exit 1
          }

          git -C target-repo rev-parse "$VERSION_TAG" >/dev/null 2>&1 || {
            echo "SLACK_MESSAGE=❌ 태그 $VERSION_TAG 이 존재하지 않습니다." >> $GITHUB_ENV
            exit 1
          }

          COMMITS=$(git -C target-repo log --pretty=format:"%s" ${DEV_VERSION}..${VERSION_TAG})

          if [[ -z "$COMMITS" ]]; then
            echo "SLACK_MESSAGE=⚠️ ${DEV_VERSION} ~ ${VERSION_TAG} 사이에 커밋이 없습니다." >> $GITHUB_ENV
            echo "tickets=" >> $GITHUB_OUTPUT
            exit 0
          fi

          TICKETS=$(echo "$COMMITS" | grep -o -E "$TICKET_PATTERN" | sort -u | tr '\n' ' ')
          echo "tickets=$TICKETS" >> $GITHUB_OUTPUT

      - name: Notify - Jira 티켓 추출 완료
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST --data-urlencode "payload={
            \"username\": \"jira-bot\",
            \"text\": \"🔍 Jira 티켓 추출 완료\",
            \"icon_emoji\": \":mag:\"
          }" "$SLACK_WEBHOOK"

      - name: Update Jira Fix Versions
        id: update-jira
        env:
          DOMAIN: ${{ secrets.DOMAIN }}
          USER: ${{ secrets.USER }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          if [[ -z "$DOMAIN" || -z "$USER" || -z "$API_TOKEN" ]]; then
            echo "SLACK_MESSAGE=❌ Jira 인증 정보 누락 (DOMAIN, USER, API_TOKEN 확인)" >> $GITHUB_ENV
            exit 1
          fi

          IFS=' ' read -ra TICKETS <<< "${{ steps.extract.outputs.tickets }}"
          if [[ -z "${TICKETS[*]}" ]]; then
            echo "SLACK_MESSAGE=ℹ️ Jira 티켓이 없어 업데이트 생략됨." >> $GITHUB_ENV
            exit 0
          fi

          FAILED_TICKETS=()
          for TICKET in "${TICKETS[@]}"; do
            RESPONSE=$(curl -s -w "%{http_code}" -o response.json -u "$USER:$API_TOKEN" \
              -X PUT \
              -H "Content-Type: application/json" \
              --data "{\"update\":{\"fixVersions\":[{\"add\":{\"name\":\"$VERSION\"}}]}}" \
              "$DOMAIN/rest/api/2/issue/$TICKET")

            if [[ "$RESPONSE" == "204" ]]; then
              echo "✅ $TICKET updated"
            elif [[ "$RESPONSE" == "401" || "$RESPONSE" == "403" ]]; then
              echo "SLACK_MESSAGE=❌ Jira 인증 실패 ($RESPONSE) - 사용자 또는 토큰 확인 필요" >> $GITHUB_ENV
              exit 1
            else
              echo "❌ $TICKET 업데이트 실패 (상태 코드: $RESPONSE)"
              cat response.json
              FAILED_TICKETS+=("$TICKET")
            fi
            sleep 1
          done

          if [[ ${#FAILED_TICKETS[@]} -ne 0 ]]; then
            echo "SLACK_MESSAGE=⚠️ Jira 일부 티켓 업데이트 실패: ${FAILED_TICKETS[*]}" >> $GITHUB_ENV
            exit 1
          fi

          echo "SLACK_MESSAGE=🎉 Jira Fix Version 업데이트 완료: ${TICKETS[*]}" >> $GITHUB_ENV

      - name: Notify - Jira 업데이트 결과
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
        run: |
          curl -X POST --data-urlencode "payload={
            \"username\": \"jira-bot\",
            \"text\": \"$SLACK_MESSAGE\",
            \"icon_emoji\": \":robot_face:\"
          }" "$SLACK_WEBHOOK"

      - name: Notify - 전체 완료
        if: success()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST --data-urlencode "payload={
            \"username\": \"jira-bot\",
            \"text\": \"✅ 전체 워크플로우 완료\",
            \"icon_emoji\": \":white_check_mark:\"
          }" "$SLACK_WEBHOOK"

      - name: Notify - 전체 실패
        if: failure()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST --data-urlencode "payload={
            \"username\": \"jira-bot\",
            \"text\": \"❌ 워크플로우 실패. 로그를 확인하세요.\",
            \"icon_emoji\": \":x:\"
          }" "$SLACK_WEBHOOK"
