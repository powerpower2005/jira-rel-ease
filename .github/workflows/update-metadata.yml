name: Update Metadata

on:
  push:
    branches:
        - 'main'
        - 'master'
        - 'release*'  # release/ 로 시작하는 모든 브랜치
    paths:
      - 'jira-deployment/dev/**'
      - 'jira-deployment/prod/**'
      - 'jira-deployment/staging/**'
  workflow_dispatch:
    inputs:
      environment:
        description: '메타데이터를 업데이트할 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - prod
          - staging
          - dev

jobs:
  update-metadata:
    runs-on: ubuntu-latest
    
    permissions:
      deployments: write
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 변경된 파일 필터링
      - name: Filter changed files
        id: changed-files
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dev:
              - 'jira-deployment/dev/**'
            prod:
              - 'jira-deployment/prod/**'
            staging:
              - 'jira-deployment/staging/**'

      # 3. 변경된 파일 목록 출력
      - name: List Changed Files
        run: |
          echo "변경된 파일 목록:"
          git diff --name-only HEAD~1 HEAD -- | grep '^jira-deployment/' || true
          echo "----------------------------------------"
          git diff --name-only HEAD~1 HEAD -- | grep '^jira-deployment/' | while read -r file; do
            echo "📄 파일: $file"
            echo "변경 내용:"
            git diff HEAD~1 HEAD -- "$file" | cat
            echo "----------------------------------------"
          done

      # 4. Jira 이슈 키 추출
      - name: Extract Jira Issue Keys
        id: extract-keys
        run: |
          ISSUE_KEYS=$(git log -1 --pretty=%B | grep -oE '[A-Z]+-[0-9]+' || echo "No issue key found")
          echo "📌 추출된 Jira Issue Keys: $ISSUE_KEYS"
          echo "issue-keys=$ISSUE_KEYS" >> $GITHUB_OUTPUT

      # 5. Dev Deployment 생성
      - name: Create Dev Deployment
        id: create-dev-deployment
        if: steps.changed-files.outputs.dev == 'true'
        uses: chrnorm/deployment-action@releases/v2
        with:
          token: ${{ github.token }}
          environment: dev
          ref: ${{ github.sha }}
          description: "Metadata update deployment to dev"

      # 6. Staging Deployment 생성
      - name: Create Staging Deployment
        id: create-staging-deployment
        if: steps.changed-files.outputs.staging == 'true'
        uses: chrnorm/deployment-action@releases/v2
        with:
          token: ${{ github.token }}
          environment: stage
          ref: ${{ github.sha }}
          description: "Metadata update deployment to stage"

      # 7. Prod Deployment 생성
      - name: Create Prod Deployment
        id: create-prod-deployment
        if: steps.changed-files.outputs.prod == 'true'
        uses: chrnorm/deployment-action@releases/v2
        with:
          token: ${{ github.token }}
          environment: prod
          ref: ${{ github.sha }}
          description: "Metadata update deployment to prod"

      # 8. Dev Deployment 상태 업데이트
      - name: Update Dev Deployment Status
        if: steps.create-dev-deployment.outcome == 'success'
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "success"
          deployment-id: ${{ steps.create-dev-deployment.outputs.deployment_id }}

      # 9. Staging Deployment 상태 업데이트
      - name: Update Staging Deployment Status
        if: steps.create-staging-deployment.outcome == 'success'
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "success"
          deployment-id: ${{ steps.create-staging-deployment.outputs.deployment_id }}

      # 10. Prod Deployment 상태 업데이트
      - name: Update Prod Deployment Status
        if: steps.create-prod-deployment.outcome == 'success'
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "success"
          deployment-id: ${{ steps.create-prod-deployment.outputs.deployment_id }}

      # 11. 실패 시 Deployment 상태 업데이트
      - name: Update Deployment Status on Failure
        if: failure()
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "failure"
          deployment-id: ${{ steps.create-dev-deployment.outputs.deployment_id || steps.create-staging-deployment.outputs.deployment_id || steps.create-prod-deployment.outputs.deployment_id }}