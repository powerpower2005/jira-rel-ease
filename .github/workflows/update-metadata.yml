name: Update Metadata

on:
  push:
    paths:
      - 'jira-deployment/dev/**'
      - 'jira-deployment/prod/**'
      - 'jira-deployment/staging/**'
  workflow_dispatch:
    inputs:
      environment:
        description: '메타데이터를 업데이트할 환경'
        required: true
        default: 'stage'
        type: choice
        options:
          - prod
          - stage
          - dev

jobs:
  update-metadata:
    runs-on: ubuntu-latest
    
    permissions:
      deployments: write
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 변경된 파일 필터링
      - name: Filter changed files
        id: changed-files
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dev:
              - 'jira-deployment/dev/**'
            prod:
              - 'jira-deployment/prod/**'
            staging:
              - 'jira-deployment/staging/**'

      # 3. 환경 자동 감지
      - name: Detect Environment
        id: detect-env
        run: |
          if [[ "${{ steps.changed-files.outputs.dev }}" == "true" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changed-files.outputs.prod }}" == "true" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.changed-files.outputs.staging }}" == "true" ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      # 4. 변경된 파일 목록 출력
      - name: List Changed Files
        run: |
          echo "변경된 파일 목록:"
          git diff --name-only HEAD~1 HEAD -- | grep '^jira-deployment/' || true
          echo "----------------------------------------"
          git diff --name-only HEAD~1 HEAD -- | grep '^jira-deployment/' | while read -r file; do
            echo "📄 파일: $file"
            echo "변경 내용:"
            git diff HEAD~1 HEAD -- "$file" | cat
            echo "----------------------------------------"
          done

      # 5. Jira 이슈 키 추출
      - name: Extract Jira Issue Keys
        id: extract-keys
        run: |
          ISSUE_KEYS=$(git log -1 --pretty=%B | grep -oE '[A-Z]+-[0-9]+' || echo "No issue key found")
          echo "📌 추출된 Jira Issue Keys: $ISSUE_KEYS"
          echo "issue-keys=$ISSUE_KEYS" >> $GITHUB_OUTPUT

      # 6. Deployment 생성
      - name: Create Deployment
        id: create-deployment
        uses: chrnorm/deployment-action@releases/v2
        with:
          token: ${{ github.token }}
          environment: ${{ steps.detect-env.outputs.environment }}
          ref: ${{ github.sha }}
          description: "Metadata update deployment to ${{ steps.detect-env.outputs.environment }}"

      # 7. Deployment 상태 업데이트
      - name: Update Deployment Status
        uses: chrnorm/deployment-status@releases/v2
        if: success()
        with:
          token: ${{ github.token }}
          state: "success"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
          
      - name: Update Deployment Status on Failure
        if: failure()
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ github.token }}
          state: "failure"
          deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
